name: Build and Deploy to AWS App Runner

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: planner-bot
  ECR_COLLECTOR_REPOSITORY: planner-bot-collector
  APP_RUNNER_SERVICE: planner-bot-service

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Build and push main application image
    - name: Build and push main application
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    # Build and push OTEL collector image
    - name: Build and push OTEL collector
      uses: docker/build-push-action@v5
      with:
        context: .
        dockerfile: Dockerfile.otel-collector
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_COLLECTOR_REPOSITORY }}:latest
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_COLLECTOR_REPOSITORY }}:${{ github.sha }}
        platforms: linux/amd64

    - name: Deploy to App Runner (Production only)
      if: github.ref == 'refs/heads/main'
      run: |
        # Get the latest image URI
        IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest"
        
        # Start deployment
        aws apprunner start-deployment \
          --service-arn ${{ secrets.APP_RUNNER_SERVICE_ARN }} \
          --region ${{ env.AWS_REGION }}
        
        echo "Deployment started for App Runner service"
        echo "Image URI: $IMAGE_URI"

    - name: Wait for deployment (Production only)
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Waiting for App Runner deployment to complete..."
        
        # Wait for deployment to complete (timeout after 10 minutes)
        timeout 600 bash -c '
          while true; do
            STATUS=$(aws apprunner describe-service \
              --service-arn ${{ secrets.APP_RUNNER_SERVICE_ARN }} \
              --region ${{ env.AWS_REGION }} \
              --query "Service.Status" \
              --output text)
            
            echo "Service Status: $STATUS"
            
            if [ "$STATUS" = "RUNNING" ]; then
              echo "Deployment completed successfully!"
              break
            elif [ "$STATUS" = "CREATE_FAILED" ] || [ "$STATUS" = "UPDATE_FAILED" ]; then
              echo "Deployment failed!"
              exit 1
            fi
            
            sleep 30
          done
        '

    - name: Get service URL
      if: github.ref == 'refs/heads/main'
      run: |
        SERVICE_URL=$(aws apprunner describe-service \
          --service-arn ${{ secrets.APP_RUNNER_SERVICE_ARN }} \
          --region ${{ env.AWS_REGION }} \
          --query "Service.ServiceUrl" \
          --output text)
        
        echo "ðŸš€ Application deployed successfully!"
        echo "Service URL: https://$SERVICE_URL"
        
        # Output for GitHub summary
        # Create GitHub summary
        echo "## Deployment Summary ðŸš€" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: âœ… Success" >> $GITHUB_STEP_SUMMARY
        echo "- **Service URL**: https://$SERVICE_URL" >> $GITHUB_STEP_SUMMARY
        echo "- **Main Image**: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "- **Collector Image**: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_COLLECTOR_REPOSITORY }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "- **LangSmith**: âœ… Enabled" >> $GITHUB_STEP_SUMMARY
        echo "- **CloudWatch**: âœ… OTLP Traces" >> $GITHUB_STEP_SUMMARY